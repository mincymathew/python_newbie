#DFS

class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def find_paths_recurse(root, sum, allPaths, onePath):
    sum -= root.val
    if root.left is None and root.right is None and sum == 0:
        onePath.append(root.val)
        allPaths.append(list(onePath))
        onePath.pop()
        return

    onePath.append(root.val)
    if root.left:
        find_paths_recurse(root.left, sum, allPaths, onePath)

    if root.right:
        find_paths_recurse(root.right, sum, allPaths, onePath)

    onePath.pop()
    return


def find_paths(root, sum):
    allPaths = []
    onePath = []
    # TODO: Write your code here
    if root is None:
        return []
    if root.left is None and root.right is None and sum - root.val == 0:
        allPaths.append(root.val)
        return allPaths
    find_paths_recurse(root, sum, allPaths, onePath)
    return allPaths


def main():
    root = TreeNode(12)
    root.left = TreeNode(7)
    root.right = TreeNode(1)
    root.left.left = TreeNode(4)
    root.right.left = TreeNode(10)
    root.right.right = TreeNode(5)
    sum = 23
    print("Tree paths with sum " + str(sum) +
          ": " + str(find_paths(root, sum)))


main()
